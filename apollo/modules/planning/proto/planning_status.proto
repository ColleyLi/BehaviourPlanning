syntax = "proto2";

package apollo.planning;

import "modules/common/proto/drive_state.proto";
import "modules/common/proto/geometry.proto";
import "modules/common/proto/pnc_point.proto";
import "modules/planning/proto/planning_config.proto";
import "modules/routing/proto/routing.proto";

/*
  This file defines the data types that represents the internal state of the
  planning module.
  It will not be refreshed in each planning cycle.
*/

message BareIntersectionStatus {
  optional string current_pnc_junction_overlap_id = 1;
  optional string done_pnc_junction_overlap_id = 2;
}

message ChangeLaneStatus {
  enum Status {
    IN_CHANGE_LANE = 1;       // during change lane state
    CHANGE_LANE_FAILED = 2;   // change lane failed
    CHANGE_LANE_SUCCESS = 3;  // change lane failed
  }
  optional Status status = 1;
  // the id of the route segment that the vehicle is driving on
  optional string path_id = 2;
  // the time stamp when the state started.
  optional double timestamp = 3;
}

message StopTime {
  optional string obstacle_id = 1;
  // the timestamp when start stopping for the crosswalk
  optional double obstacle_stop_timestamp = 2;
}

message CrosswalkStatus {
  optional string crosswalk_id = 1;
  // the timestamp when start stopping for the crosswalk
  repeated StopTime stop_time = 2;
  repeated string finished_crosswalk = 3;
}

message DestinationStatus {
  optional bool has_passed_destination = 1 [default = false];
}

message PedestrianStatus {
  repeated StopTime stop_time = 1;
}

message PullOverStatus {
  optional bool is_feasible = 1 [default = false];  // default must be false
  optional apollo.common.PointENU position = 2;
  optional double theta = 3;
  optional double length_front = 4;
  optional double length_back = 5;
  optional double width_left = 6;
  optional double width_right = 7;
  optional int32 idx = 8;
  optional bool is_in_pull_over_scenario = 9 [default = false];
}

message ReroutingStatus {
  optional double last_rerouting_time = 1;
  optional bool need_rerouting = 2 [default = false];
  optional routing.RoutingRequest routing_request = 3;
}

message RightOfWayStatus {
  // whether the vehicle has right of way in junction
  map<string, bool> junction = 1;
}

message ScenarioStatus {
  optional ScenarioConfig.ScenarioType scenario_type = 1;
  optional ScenarioConfig.StageType stage_type = 2;
}

message SidePassStatus {
  optional string front_blocking_obstacle_id = 1;
}

message StopSignStatus {
  optional string current_stop_sign_overlap_id = 1;
  optional string done_stop_sign_overlap_id = 2;
  repeated string wait_for_obstacle_id = 3;
}

message TrafficLightStatus {
  repeated string current_traffic_light_overlap_id = 1;
  repeated string done_traffic_light_overlap_id = 2;
}

message SidePassStopStatus {
  optional apollo.common.PathPoint change_lane_stop_path_point = 1;
  optional bool check_clear_flag = 2;
}

message PlanningStatus {
  optional BareIntersectionStatus bare_intersection = 1;
  optional ChangeLaneStatus change_lane = 2;
  optional CrosswalkStatus crosswalk = 3;
  optional DestinationStatus destination = 4;
  optional apollo.common.EngageAdvice engage_advice = 5;
  optional PedestrianStatus pedestrian = 6;
  optional PullOverStatus pull_over = 7;
  optional ReroutingStatus rerouting = 8;
  optional RightOfWayStatus right_of_way = 9;
  optional ScenarioStatus scenario = 10;
  optional SidePassStatus side_pass = 11;
  optional StopSignStatus stop_sign = 12;
  optional TrafficLightStatus traffic_light = 13;
  optional SidePassStopStatus side_pass_stop = 14;
}
